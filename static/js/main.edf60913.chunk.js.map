{"version":3,"sources":["components/Counter/Clock/Clock.jsx","constants/Holidays.jsx","components/Counter/Counter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","hours","minutes","seconds","timeDifference","nextHolidayDate","_this2","setInterval","nextDate","Date","parse","setState","Math","floor","number","_this$state","react_default","a","createElement","className","addZero","React","Component","HolidayList","id","occasion","date","remarks","Counter","isLoading","nextHoliday","checkNearestEvent","holidayList","today","nearestDate","getNearestDate","map","item","index","datesList","nearest","i","length","Counter_Clock_Clock","App","components_Counter_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edf60913.chunk.js","sourcesContent":["import React from 'react';\n\nclass Clock extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: 0,\n      hours: 0, \n      minutes: 0,\n      seconds: 0\n    }\n  }\n\n  componentWillMount() {\n    this.timeDifference(this.props.nextHolidayDate);\n  }\n\n  componentDidMount() {\n    setInterval(() => (\n      this.timeDifference(this.props.nextHolidayDate)\n    ), 1000);\n  }\n  \n  timeDifference(nextDate) {\n\n    const timeDifference = nextDate - Date.parse(new Date()); \n\n    this.setState({\n      days: Math.floor(timeDifference / (1000 * 60 * 60 * 24)),\n      hours: Math.floor(timeDifference / (1000 * 60 * 60) % 24), \n      minutes: Math.floor((timeDifference / 1000 / 60) % 60),\n      seconds: Math.floor((timeDifference / 1000) % 60)\n    });\n\n  }\n  \n  addZero(number) {\n    return number < 10 ? '0' + number : number;\n  }\n\n  render() {\n\n    const { \n      days, \n      hours, \n      minutes, \n      seconds\n    } = this.state;\n\n    return(\n      <div className=\"clock-container\">\n        <div className=\"cd-box\"> \n          <span className=\"cd-digits\">\n            {this.addZero(days)}\n          </span>\n          <br />\n          <span className=\"cd-label\">days</span>\n        </div>\n        <div className=\"cd-box\"> \n          <span className=\"cd-digits\">\n            {this.addZero(hours)}\n          </span>\n          <br />\n          <span className=\"cd-label\">hours</span>\n        </div>\n        <div className=\"cd-box\"> \n          <span className=\"cd-digits\">\n            {this.addZero(minutes)}\n          </span>\n          <br />\n          <span className=\"cd-label\">minutes</span>\n        </div>\n        <div className=\"cd-box\"> \n          <span className=\"cd-digits\">\n            {this.addZero(seconds)}\n          </span>\n          <br />\n          <span className=\"cd-label\">seconds</span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Clock;","export const HolidayList = [\n  {\n    id: 1, \n    occasion: 'English New Year', \n    date: '1 January 2019', \n    remarks: ''\n  },\n  {\n    id: 2, \n    occasion: 'International Womens Day', \n    date: '8 March 2019', \n    remarks: ''\n  },\n  {\n    id: 3, \n    occasion: 'Holi Purnima', \n    date: '20 March 2019', \n    remarks: ''\n  },\n  {\n    id: 4, \n    occasion: 'Nepali New Year', \n    date: '15 April 2019', \n    remarks: 'Substitution Holiday for April 14th'\n  },\n  {\n    id: 5, \n    occasion: 'Labor Day', \n    date: '1 May 2019', \n    remarks: ''\n  },\n  {\n    id: 6, \n    occasion: 'Dashain Holidays', \n    date: '7 October 2019', \n    remarks: 'October 6th - 9th'\n  },\n  {\n    id: 7, \n    occasion: 'Tihar Holidays', \n    date: '27 October 2019', \n    remarks: 'October 27th - 30th'\n  },\n];","import React from 'react';\nimport Clock from './Clock/Clock';\nimport { HolidayList } from '../../constants/Holidays';\n\nclass Counter extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n      isLoading: '',\n      nextHoliday: {\n        id: '',\n        occasion: '',\n        date: '',\n        remarks: ''\n      }\n    }\n  }\n\n  componentWillMount() {\n    this.checkNearestEvent();\n  }\n  \n  checkNearestEvent() {\n    \n    const holidayList = HolidayList;\n    const today = Date.parse(new Date());\n    \n    const nearestDate = this.getNearestDate(holidayList, today);\n\n    holidayList.map((item, index) => ( \n      (Date.parse(item.date) - today) === nearestDate && \n        this.setState({ \n          nextHoliday: item \n        })\n      ) \n    );\n    \n  }\n\n  getNearestDate(holidayList, today) {\n    \n    const datesList = holidayList.map((item, index) => { \n      return Date.parse(item.date) - today;\n    });\n\n    var nearest = 0;\n\n    for (var i = 0; i < datesList.length; i++) {\n      if(datesList[i] > nearest && datesList[i] > 0) {\n        nearest = datesList[i];\n        break;\n      }\n    }\n    return nearest;\n  }\n\n  render() {\n\n    const nextHolidayDate = Date.parse(this.state.nextHoliday.date);\n\n    return ( \n        <div className=\"event-container\">\n          <p className=\"app-title\">Days until next holiday <span className=\"logo\">@fusemachines</span></p>\n          <Clock nextHolidayDate={nextHolidayDate} />\n          <span className=\"event-name\">{this.state.nextHoliday.occasion}</span>\n          <span className=\"event-date\">({this.state.nextHoliday.date})</span>\n          {this.state.nextHoliday.remarks &&\n            <span className=\"event-remarks\">Note: {this.state.nextHoliday.remarks}</span>\n          }\n        </div>\n    );\n  }\n}\n\nexport default Counter;                         ","import React, { Component } from 'react';\nimport './App.css';\n\nimport Counter from './components/Counter/Counter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}